str(ts_data)
ts_data
data <- read.csv("cabletheft_ts.csv", header=TRUE, stringsAsFactors=FALSE)
data$Date <- as.Date(data$Date, "%d/%m/%Y")
ts_data <- xts(data$Count, order.by = data$Date)
plot(ts_data)
auto.arima(ts_data)
library(forecast)
auto.arima(ts_data)
model_fit <- Arima(ts_data)
our_forecast <- predict(model_fit, n.ahead = 8)
plot.xts(ts_data,main="")
lines(forecasted_viewers, col=c("red"))
forecasted_viewers <- xts(our_forecast$pred,ts_data)
our_forecast$pred
forecasted_viewers <- xts(our_forecast$pred,ts_data)
our_forecast
forecasted_viewers <- xts(our_forecast$pred,ts_data$Date)
data$Date <- as.Date(data$Date, "%m/%d/%Y")
forecasted_viewers <- xts(our_forecast$pred,data$Date)
forecasted_viewers <- xts(our_forecast$pred,order.by = data$Date)
model_fit <- Arima(ts_data,= list(order = c(1,1,0), period = 8))
model_fit <- Arima(ts_data,seasonal = list(order = c(1,1,0), period = 8))
our_forecast <- predict(model_fit, n.ahead = 8)
data$Date <- as.Date(data$Date, "%m/%d/%Y")
forecasted_viewers <- xts(our_forecast$pred,order.by = data$Date)
data$Date <- as.Date(data$Date, "%d/%m/%Y")
forecasted_viewers <- xts(our_forecast$pred,order.by = data$Date)
plot.xts(ts_data,main="")
lines(forecasted_viewers, col=c("red"))
our_forecast <- predict(model_fit, n.ahead = 8)
data$Date <- as.Date(data$Date, "%d/%m/%Y")
forecasted_viewers <- xts(our_forecast$pred,order.by = data$Date)
our_forecast$pred
our_forecast[,1]
our_forecast[,-1]
our_forecast$pred[,-1]
auto.arima(ts_data)
model_fit <- Arima(ts_data,seasonal = list(order = c(1,1,0), period = 8))
our_forecast <- predict(model_fit, n.ahead = 8)
data$Date <- as.Date(data$Date, "%d/%m/%Y")
forecasted_viewers <- xts(our_forecast$pred,order.by = data$Date)
data$Date
our_forecast$pred
forecasted_viewers <- xts(our_forecast$pred,data$Date)
str(our_forecast)
our_forecast$pred[1,]
forecasted_viewers <- xts(our_forecast$pred,data$Date[,1])
forecasted_viewers <- xts(our_forecast$pred,data$Date[,-1])
forecasted_viewers <- xts(our_forecast$pred,data$Date[1,])
forecasted_viewers <- xts(our_forecast$pred,data$Date[-1,])
forecasted_viewers <- xts(our_forecast$pred)
forecasted_viewers <- xts(our_forecast$pred,data$Date)
traceback()
data$Date <- as.Date(data$Date, "%d/%m/%Y")
ts_data <- xts(data$Count, order.by = data$Date)
plot(ts_data)
library(forecast)
auto.arima(ts_data)
model_fit <- Arima(ts_data,seasonal = list(order = c(1,1,0), period = 8))
our_forecast <- predict(model_fit, n.ahead = 8)
data$Date <- as.Date(data$Date, "%d/%m/%Y")
forecasted_viewers <- xts(our_forecast$pred,data$Date)
data <- "Date    Incidents  NumberProtests  NumberPatrols
11/31/2014   132  3  2
12/31/2014   152  1  3
1/31/2014   156  2  4
2/31/2014   145  4  2
3/31/2014   136  3  2
4/31/2014   126  2  4
5/31/2014   125  3  6
6/31/2014   143  1  7
7/31/2014   115  2  6
8/31/2014   121  2  3
9/31/2014   127  1  6
10/30/2014   121  3  5
11/31/2014   118  1  8
12/30/2014   109  1  9
""
data <- "Date    Incidents  NumberProtests  NumberPatrols
11/31/2014   132  3  2
12/31/2014   152  1  3
1/31/2014   156  2  4
2/31/2014   145  4  2
3/31/2014   136  3  2
4/31/2014   126  2  4
5/31/2014   125  3  6
6/31/2014   143  1  7
7/31/2014   115  2  6
8/31/2014   121  2  3
9/31/2014   127  1  6
10/30/2014   121  3  5
11/31/2014   118  1  8
12/30/2014   109  1  9"
Lines <- "Name    Composite1  Composite2  Composite3  Composite4 Composite5
Bmark   229 229 982 612 995
8/31/2014   0.9979  0.9404  4.3808      3.9296
7/31/2014   -0.4563 -0.3038 -1.7817     -1.7248
6/30/2014   0.205   0.2234  2.2184      2.7304
5/31/2014   1.311   1.5771  3.4824      1.7601
4/30/2014   0.9096  1.0187  -1.9195     1.2964"
data <- "Date    Incidents  NumberProtests  NumberPatrols"
12/31/2014   152  1  3"
11/31/2014  132 3 2"
11/30/2014  132 3 2"
11/30/2014 132 3 2"
11/30/2014   132   3   2"
4/30/2014   0.9096  1.0187  -1.9195     1.2964"
Lines <- "Name    Composite1  Composite2  Composite3  Composite4 Composite5
8/31/2014   0.9979  0.9404  4.3808      3.9296
7/31/2014   -0.4563 -0.3038 -1.7817     -1.7248
6/30/2014   0.205   0.2234  2.2184      2.7304
5/31/2014   1.311   1.5771  3.4824      1.7601
4/30/2014   0.9096  1.0187  -1.9195     1.2964"
6/30/2014   0.205   0.2234  2.2184      2.7304
Lines <- "Date    Incidents  NumberProtests  NumberPatrols  Composite4 Composite5
8/31/2014   0.9979  0.9404  4.3808      3.9296
7/31/2014   -0.4563 -0.3038 -1.7817     -1.7248
6/30/2014   0.205   0.2234  2.2184      2.7304
5/31/2014   1.311   1.5771  3.4824      1.7601
4/30/2014   0.9096  1.0187  -1.9195     1.2964"
data <- "Date Incidents NumberProtests NumberPatrols
11/30/2014   132   3   2
12/31/2014   152  1  3
1/31/2014   156  2  4
2/31/2014   145  4  2
3/31/2014   136  3  2
4/31/2014   126  2  4
5/31/2014   125  3  6
6/31/2014   143  1  7
7/31/2014   115  2  6
8/31/2014   121  2  3
9/31/2014   127  1  6
10/30/2014   121  3  5
11/31/2014   118  1  8
12/30/2014   109  1  9"
data <- "Date Incidents NumberProtests NumberPatrols
11/30/2014   132   3   2
12/31/2014   152  1  3
1/31/2015   156  2  4
2/31/2015   145  4  2
3/31/2015   136  3  2
4/31/2015   126  2  4
5/31/2015   125  3  6
6/31/2015   143  1  7
7/31/2015   115  2  6
8/31/2015   121  2  3
9/31/2015   127  1  6
10/30/2015   121  3  5
11/31/2015   118  1  8
12/30/2015   109  1  9"
allcomp <- read.table(text=data, header=TRUE, fill=TRUE)
allcomp_xts <- xts(allcomp[,-1], as.Date(allcomp[,1], "%m/%d/%Y"))
plot(allcomp_xts)
allcomp_xts
data <- "Date Incidents NumberProtests NumberPatrols
11/30/2014   132   3   2
12/31/2014   152  1  3
1/31/2015   156  2  4
2/28/2015   145  4  2
3/31/2015   136  3  2
4/30/2015   126  2  4
5/31/2015   125  3  6
6/30/2015   143  1  7
7/31/2015   115  2  6
8/31/2015   121  2  3
9/30/2015   127  1  6
10/31/2015   121  3  5
11/30/2015   118  1  8
12/31/2015   109  1  9"
library(xts)
# use fill=TRUE because you only provided data for 4 composites
allcomp <- read.table(text=data, header=TRUE, fill=TRUE)
# create an xts object from the remaining data
allcomp_xts <- xts(allcomp[,-1], as.Date(allcomp[,1], "%m/%d/%Y"))
plot(allcomp_xts)
allcomp_xts
plot(allcomp%Incidents)
plot(allcomp_xts%Incidents)
plot(allcomp_xts%Incidents,order.by = data$Date)
allcomp$Date <- as.Date(allcomp[,1], "%m/%d/%Y")
allcomp_xts <- xts(allcomp[,-1], as.Date(allcomp[,1], "%m/%d/%Y"))
plot(allcomp_xts%Incidents,order.by = data$Date)
plot(allcomp_xts%Incidents,order.by = allcomp_xts$Date)
plot(allcomp_xts%Incidents,order.by = allcomp$Date)
plot(allcomp_xts%Incidents)
plot(allcomp_xts$Incidents)
allcomp <- read.table(text=data, header=TRUE, fill=TRUE)
allcomp_xts <- xts(allcomp[,-1], as.Date(allcomp[,1], "%m/%d/%Y"))
plot(allcomp_xts$Incidents)
allcomp_xts
allcomp$Date <- as.Date(allcomp[,1], "%m/%d/%Y")
allcomp_xts <- xts(allcomp[,-1], as.Date(allcomp[,1], "%m/%d/%Y"))
plot(allcomp_xts$Incidents)
test_regressors <- xts(allcomp_xts[,2:4], order.by = allcomp$Date)
test_regressors <- xts(allcomp_xts[,2:3], order.by = allcomp$Date)
auto.arima(allcomp_xts)
model_fit <- Arima(allcomp_xts,seasonal = list(order = c(1,1,0), period = 8))
auto.arima(allcomp_xts$Incidents)
model_fit <- Arima(allcomp_xts$Incidents, xreg=test_regressors, order = c(0,1,1), seasonal = list(order = c(1,1,0), period = 8))
model_fit <- Arima(allcomp_xts, xreg=test_regressors, order = c(0,1,1), seasonal = list(order = c(1,1,0), period = 8))
auto.arima(allcomp_xts$Incidents)
model_fit <- Arima(allcomp_xts$Incidents, xreg=test_regressors, order = c(0,1,1), seasonal = list(order = c(1,1,0), period = 8))
allcomp_xts[,2:3]
test_regressors
model_fit <- Arima(allcomp_xts$Incidents, xreg=test_regressors, order = c(0,1,1), seasonal = list(order = c(1,1,0), period = 8))
traceback()
model_fit <- Arima(allcomp_xts$Incidents, xreg=test_regressors, period = 8))
model_fit <- Arima(allcomp_xts$Incidents, xreg=test_regressors, period = 8)
model_fit <- Arima(allcomp_xts$Incidents, xreg=test_regressors)
our_forecast <- predict(model_fit, n.ahead = 8)
our_forecast <- predict(model_fit)
model_fit <- Arima(allcomp_xts$Incidents, xreg=test_regressors, order = c(0,1,1), seasonal = list(order = c(1,1,0), period = 8))
model_fit <- Arima(allcomp_xts$Incidents, xreg=test_regressors, order = c(0,1,1), seasonal = list(order = c(1,1,0)))
our_forecast <- predict(model_fit, n.ahead = 8)
our_forecast <- predict(model_fit)
, n.ahead = 8
our_forecast <- predict(model_fit, n.ahead = 8)
model_fit <- Arima(allcomp_xts$Incidents, xreg=test_regressors, order = c(0,1,1), seasonal = list(order = c(1,1,0)))
our_forecast <- predict(model_fit, newxreg=test_regressors, n.ahead = 8)
our_forecast <- predict(model_fit, newxreg=test_regressors)
data$Date <- as.Date(data$Date, "%d/%m/%Y")
forecasted_viewers <- xts(our_forecast$pred,data$Date)
forecasted_viewers <- xts(our_forecast$pred,allcomp$Date)
plot.xts(allcomp,main="")
plot.xts(forecasted_viewers,main="")
lines(forecasted_viewers, col=c("red"))
> fit <- arima(AirPassengers, order=c(1,0,0), list(order=c(2,1,0), period=12))
plot.xts(allcomp_xts,main="")
lines(forecasted_viewers, col=c("red"))
model_fit <- Arima(allcomp_xts$Incidents, xreg=test_regressors, order = c(0,1,1), seasonal = list(order = c(1,1,0),n.ahead = 8))
our_forecast <- predict(model_fit, newxreg=test_regressors, n.ahead = 8)
allcomp$Date <- as.Date(allcomp$Date, "%d/%m/%Y")
forecasted_viewers <- xts(our_forecast$pred,allcomp$Date)
plot.xts(allcomp_xts,main="")
lines(forecasted_viewers, col=c("red"))
> fit <- arima(AirPassengers, order=c(1,0,0), list(order=c(2,1,0), period=12))
> fore <- predict(fit, n.ahead=24)
> # error bounds at 95% confidence level
> U <- fore$pred + 2*fore$se
> L <- fore$pred – 2*fore$se
model_fit <- Arima(allcomp_xts$Incidents, xreg=test_regressors, order = c(0,1,1), seasonal = list(order = c(1,1,0),period = 8))
our_forecast <- predict(model_fit, newxreg=test_regressors, n.ahead = 8)
allcomp$Date <- as.Date(allcomp$Date, "%d/%m/%Y")
forecasted_viewers <- xts(our_forecast$pred,allcomp$Date)
plot.xts(allcomp_xts,main="")
lines(forecasted_viewers, col=c("red"))
model_fit <- Arima(allcomp_xts$Incidents, xreg=test_regressors,period = 8))
model_fit <- Arima(allcomp_xts$Incidents, xreg=test_regressors,period = 8)
model_fit <- Arima(allcomp_xts$Incidents, xreg=test_regressors, order = c(0,1,1), seasonal = list(order = c(1,1,0),period = 2))
our_forecast <- predict(model_fit, newxreg=test_regressors, n.ahead = 2)
allcomp$Date <- as.Date(allcomp$Date, "%d/%m/%Y")
forecasted_viewers <- xts(our_forecast$pred,allcomp$Date)
plot.xts(allcomp_xts,main="")
lines(forecasted_viewers, col=c("red"))
model_fit <- Arima(allcomp_xts$Incidents, xreg=test_regressors, order = c(0,1,1), seasonal = list(order = c(1,1,0),period = 1))
our_forecast <- predict(model_fit, newxreg=test_regressors, n.ahead = 2)
allcomp$Date <- as.Date(allcomp$Date, "%d/%m/%Y")
forecasted_viewers <- xts(our_forecast$pred,allcomp$Date)
plot.xts(allcomp_xts,main="")
lines(forecasted_viewers, col=c("red"))
model_fit <- Arima(allcomp_xts$Incidents, xreg=test_regressors, order = c(0,1,1), seasonal = list(order = c(1,1,0)))
our_forecast <- predict(model_fit, newxreg=test_regressors, n.ahead = 2)
allcomp$Date <- as.Date(allcomp$Date, "%d/%m/%Y")
forecasted_viewers <- xts(our_forecast$pred,allcomp$Date)
plot.xts(allcomp_xts,main="")
lines(forecasted_viewers, col=c("red"))
> fit <- arima(AirPassengers, order=c(1,0,0), list(order=c(2,1,0), period=12))
model_fit <- Arima(allcomp_xts$Incidents, xreg=test_regressors, order = c(0,1,1), seasonal = list(order = c(1,1,0)))
our_forecast <- predict(model_fit, newxreg=test_regressors, n.ahead = 2)
allcomp$Date <- as.Date(allcomp$Date, "%d/%m/%Y")
forecasted_viewers <- xts(our_forecast$pred,allcomp$Date)
plot.xts(allcomp_xts,main="")
lines(forecasted_viewers, col=c("red"))
> fit <- arima(AirPassengers, order=c(1,0,0), list(order=c(2,1,0), period=12))
fit <- arima(allcomp_xts$Incidents, order=c(1,0,0), list(order=c(2,1,0)))
fore <- predict(fit, n.ahead=2)
U <- fore$pred + 2*fore$se
L <- fore$pred – 2*fore$se
ts.plot(allcomp_xts$Incidents, fore$pred, U, L, col=c(1,2,4,4), lty = c(1,1,2,2))
U <- fore$pred + 2*fore$se
L <- fore$pred – 2*fore$se
L <- fore$pred - 2*fore$se
ts.plot(allcomp_xts$Incidents, fore$pred, U, L, col=c(1,2,4,4), lty = c(1,1,2,2))
legend(“topleft”, c(“Actual”, “Forecast”, “Error Bounds (95% Confidence)”), col=c(1,2,4), lty=c(1,1,2))
ts.plot(allcomp_xts$Incidents, fore$pred, U, L, col=c(1,2,4,4), lty = c(1,1,2,2))
traceback()
fore$pred
allcomp_xts$Incidents
ts.plot(allcomp_xts$Incidents, fore$pred, U, L, col=c(1,2,4,4), lty = c(1,1,2,2))
str(allcomp_xts$Incidents)
str(fore$pred)
ts.plot(ts(allcomp_xts$Incidents), fore$pred, U, L, col=c(1,2,4,4), lty = c(1,1,2,2))
legend(“topleft”, c(“Actual”, “Forecast”, “Error Bounds (95% Confidence)”), col=c(1,2,4), lty=c(1,1,2))
legend(“topleft”, c(“Actual”, “Forecast”, “Error Bounds (95% Confidence)”), col=c(1,2,4), lty=c(1,1,2))
traceback()
legend("topleft", c("Actual", "Forecast", "Error Bounds (95% Confidence)”), col=c(1,2,4), lty=c(1,1,2))
legend("topleft", c("Actual", "Forecast", "Error Bounds (95% Confidence)”), col=c(1,2,4), lty=c(1,1,2)))
str(ts_data)
legend("topleft", c("Actual", "Forecast", "Error Bounds (95% Confidence)”), col=c(1,2,4), lty=c(1,1,2)))
)
)
""
legend("topleft", c("Actual", "Forecast", "Error Bounds (95% Confidence)”), col=c(1,2,4), lty=c(1,1,2)))
legend("topleft", c("Actual", "Forecast", "Error Bounds (95% Confidence)"), col=c(1,2,4), lty=c(1,1,2))
data <- "Date Incidents NumberProtests NumberPatrols
11/30/2014   132   3   2
12/31/2014   152  1  3
1/31/2015   156  2  4
2/28/2015   145  4  2
3/31/2015   136  3  2
4/30/2015   126  2  4
5/31/2015   125  3  6
6/30/2015   143  1  7
7/31/2015   115  2  6
8/31/2015   121  2  3
9/30/2015   127  1  6
10/31/2015   121  3  5
11/30/2015   118  1  8
12/31/2015   109  1  9"
library(xts)
# use fill=TRUE because you only provided data for 4 composites
allcomp <- read.table(text=data, header=TRUE, fill=TRUE)
# create an xts object from the remaining data
allcomp$Date <- as.Date(allcomp[,1], "%m/%d/%Y")
allcomp_xts <- xts(allcomp[,-1], as.Date(allcomp[,1], "%m/%d/%Y"))
plot(allcomp_xts$Incidents)
test_regressors <- xts(allcomp_xts[,2:3], order.by = allcomp$Date)
#library(forecast)
#auto.arima(allcomp_xts$Incidents)
#model_fit <- Arima(allcomp_xts$Incidents, xreg=test_regressors, order = c(0,1,1), seasonal = list(order = c(1,1,0)))
#our_forecast <- predict(model_fit, newxreg=test_regressors, n.ahead = 2)
#allcomp$Date <- as.Date(allcomp$Date, "%d/%m/%Y")
#forecasted_viewers <- xts(our_forecast$pred,allcomp$Date)
#plot.xts(allcomp_xts,main="")
#lines(forecasted_viewers, col=c("red"))
fit <- arima(allcomp_xts$Incidents, order=c(1,0,0), list(order=c(2,1,0)))
fore <- predict(fit, n.ahead=2)
# error bounds at 95% confidence level
U <- fore$pred + 2*fore$se
L <- fore$pred - 2*fore$se
ts.plot(ts(allcomp_xts$Incidents), fore$pred, U, L, col=c(1,2,4,4), lty = c(1,1,2,2))
legend("topleft", c("Actual", "Forecast", "Error Bounds (95% Confidence)"), col=c(1,2,4), lty=c(1,1,2))
# check location:
getwd() # should be your project location
## index build process:
rmarkdown::render(input="index.Rmd", output_file="inst/www/index.html")
## Package build process:
opencpu::opencpu$stop()
devtools::build()
devtools::install()
opencpu::opencpu$start(port = 3000)
# Point browser to individual 1: (shift+click to open)
browseURL("http://localhost:3000/ocpu/library/flexocpu/www/index.html")
browseURL("http://localhost:3000/ocpu/library/cabledash/www/index.html")
browseURL("http://localhost:3000/ocpu/library/dashcable/www/index.html")
rmarkdown::render(input="index.Rmd", output_file="inst/www/index.html")
rmarkdown::render(input="index.Rmd", output_file="inst/www/index.html")
browseURL("http://localhost:3000/ocpu/library/dashcable/www/index.html")
# check location:
getwd() # should be your project location
## index build process:
rmarkdown::render(input="index.Rmd", output_file="inst/www/index.html")
## Package build process:
opencpu::opencpu$stop()
devtools::build()
devtools::install()
opencpu::opencpu$start(port = 3000)
# Point browser to individual 1: (shift+click to open)
browseURL("http://localhost:3000/ocpu/library/dashcable/www/index.html")
rmarkdown::render(input="index.Rmd", output_file="inst/www/index.html")
devtools::build()
devtools::install()
browseURL("http://localhost:3000/ocpu/library/dashcable/www/index.html")
getwd() # should be your project location
rmarkdown::render(input="index.Rmd", output_file="inst/www/index.html")
# Chunk 1: setup
# devtools::install_github("Rstudio/flexdashboard")
library(flexdashboard)
# Chunk 2
data("howell")
ggplot2::ggplot(data = howell, ggplot2::aes(x = age, y = height, color = as.factor(male))) +
ggplot2::geom_point()
# Chunk 3
data("howell")
ggplot2::ggplot(data = howell, ggplot2::aes(x = age, y = weight, color = as.factor(male))) +
ggplot2::geom_point()
# Chunk 4: valuebox1
valueBox(3, icon = "fa-pencil", color = '#01bb69')
# Chunk 5: valuebox2
valueBox(4, icon = "fa-envelope-o", color = '#ff8039')
# Chunk 6
gauge(90, min = 0, max = 100, gaugeSectors(
success = c(80, 100), warning = c(40, 79), danger = c(0, 39)
))
# Chunk 7
gauge(30, min = 0, max = 100, gaugeSectors(
success = c(41, 50), warning = c(21, 40), danger = c(0, 20)
))
# Chunk 8
gauge(8, min = 0, max = 100, gaugeSectors(
success = c(0, 2), warning = c(3, 6), danger = c(7, 10)
))
# Chunk 9
data <- "Date Incidents NumberProtests NumberPatrols
11/30/2014   132   3   2
12/31/2014   152  1  3
1/31/2015   156  2  4
2/28/2015   145  4  2
3/31/2015   136  3  2
4/30/2015   126  2  4
5/31/2015   125  3  6
6/30/2015   143  1  7
7/31/2015   115  2  6
8/31/2015   121  2  3
9/30/2015   127  1  6
10/31/2015   121  3  5
11/30/2015   118  1  8
12/31/2015   109  1  9"
library(xts)
# use fill=TRUE because you only provided data for 4 composites
allcomp <- read.table(text=data, header=TRUE, fill=TRUE)
# create an xts object from the remaining data
allcomp$Date <- as.Date(allcomp[,1], "%m/%d/%Y")
allcomp_xts <- xts(allcomp[,-1], as.Date(allcomp[,1], "%m/%d/%Y"))
fit <- arima(allcomp_xts$Incidents, order=c(1,0,0), list(order=c(2,1,0)))
fore <- predict(fit, n.ahead=2)
# error bounds at 95% confidence level
U <- fore$pred + 2*fore$se
L <- fore$pred - 2*fore$se
ts.plot(ts(allcomp_xts$Incidents), fore$pred, U, L, col=c(1,2,4,4), lty = c(1,1,2,2))
legend("topleft", c("Actual", "Forecast", "Error Bounds (95% Confidence)"), col=c(1,2,4), lty=c(1,1,2))
# check location:
getwd() # should be your project location
## index build process:
rmarkdown::render(input="index.Rmd", output_file="inst/www/index.html")
## Package build process:
opencpu::opencpu$stop()
devtools::build()
devtools::install()
opencpu::opencpu$start(port = 3000)
# Point browser to individual 1: (shift+click to open)
browseURL("http://localhost:3000/ocpu/library/dashcable/www/index.html")
library("opencpu", lib.loc="~/R/win-library/3.2")
browseURL("http://localhost:3000/ocpu/library/dashcable/www/index.html")
getwd() # should be your project location
## index build process:
rmarkdown::render(input="index.Rmd", output_file="inst/www/index.html")
browseURL("http://localhost:3000/ocpu/library/dashcable/www/index.html")
library(dashcable)
library(dashcable)
browseURL("http://localhost:3000/ocpu/library/dashcable/www/index.html")
# check location:
getwd() # should be your project location
## index build process:
rmarkdown::render(input="index.Rmd", output_file="inst/www/index.html")
## Package build process:
opencpu::opencpu$stop()
devtools::build()
devtools::install()
opencpu::opencpu$start(port = 3000)
# Point browser to individual 1: (shift+click to open)
browseURL("http://localhost:3000/ocpu/library/dashcable/www/index.html")
getwd() # should be your project location
## index build process:
rmarkdown::render(input="index.Rmd", output_file="inst/www/index.html")
## Package build process:
opencpu::opencpu$stop()
devtools::build()
devtools::install()
opencpu::opencpu$start(port = 3000)
# Point browser to individual 1: (shift+click to open)
browseURL("http://localhost:3000/ocpu/library/dashcable/www/index.html")
library(dashcable)
getwd() # should be your project location
## index build process:
rmarkdown::render(input="index.Rmd", output_file="inst/www/index.html")
## Package build process:
opencpu::opencpu$stop()
devtools::build()
devtools::install()
opencpu::opencpu$start(port = 3000)
# Point browser to individual 1: (shift+click to open)
browseURL("http://localhost:3000/ocpu/library/dashcable/www/index.html")
rmarkdown::render(input="index.Rmd", output_file="inst/www/index.html")
devtools::build()
devtools::install()
browseURL("http://localhost:3000/ocpu/library/dashcable/www/index.html")
library(dashcable)
browseURL("http://localhost:3000/ocpu/library/dashcable/www/index.html")
library("dashcable", lib.loc="~/R/win-library/3.2")
browseURL("http://localhost:3000/ocpu/library/dashcable/www/index.html")
library(dashcable)
browseURL("http://localhost:3000/ocpu/library/dashcable/www/index.html")
library(dashcable)
detach("package:dashcable", unload=TRUE)
library("dashcable", lib.loc="~/R/win-library/3.2")
library(dashcable)
browseURL("http://localhost:3000/ocpu/library/dashcable/www/index.html")
rmarkdown::render(input="index.Rmd", output_file="inst/www/index.html")
devtools::build()
devtools::install()
browseURL("http://localhost:3000/ocpu/library/dashcable/www/index.html")
make_map <- function(title = "This is a test"){
m <- leaflet::leaflet()
m <- leaflet::addTiles(m)
m <- leaflet::addMarkers(m, lng = -0.132065, lat = 51.516900, popup = title)
htmlwidgets::saveWidget(m, "mymap.html", selfcontained = FALSE)
}
make_map()
library("leaflet", lib.loc="~/R/win-library/3.2")
library(dashcable)
